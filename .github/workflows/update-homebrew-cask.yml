name: Update Homebrew Cask

# This workflow requires a repository secret named HOMEBREW_TAP_TOKEN
# Go to Settings > Secrets and variables > Actions > New repository secret
# Name it HOMEBREW_TAP_TOKEN and use a personal access token with repo scope
# The token needs write access to the homebrew-winmail repository

on:
  release:
    types: [published, created, edited]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to use (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  update-homebrew-cask:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout homebrew-winmail repository
        uses: actions/checkout@v3
        with:
          repository: jsbattig/homebrew-winmail
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-winmail
      
      - name: Set up environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
            TAG_INPUT="${{ github.event.inputs.tag_name }}"
            echo "VERSION=${TAG_INPUT#v}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "release" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
            echo "VERSION=${github.event.release.tag_name#v}" >> $GITHUB_ENV
          else
            # Fallback - try to get the latest tag
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
            echo "VERSION=${TAG_NAME#v}" >> $GITHUB_ENV
          fi
          
          # Print debug information
          echo "Event name: ${{ github.event_name }}"
          echo "Tag name: ${{ env.TAG_NAME }}"
          echo "Version: ${{ env.VERSION }}"
      
      - name: Download DMG and calculate checksum
        run: |
          # Create Casks directory if it doesn't exist
          mkdir -p homebrew-winmail/Casks
          
          # Download the DMG from the GitHub release
          RELEASE_URL="https://github.com/jsbattig/py-winmail-opener/releases/download/${{ env.TAG_NAME }}/WinmailOpener-${{ env.VERSION }}.dmg"
          echo "Downloading: $RELEASE_URL"
          curl -L "$RELEASE_URL" -o "WinmailOpener-${{ env.VERSION }}.dmg"
          
          if [ ! -f "WinmailOpener-${{ env.VERSION }}.dmg" ]; then
            echo "Error: DMG file not found at $RELEASE_URL"
            # Look for a cask formula in the release assets instead
            echo "Looking for cask formula in release assets..."
            CASK_URL="https://github.com/jsbattig/py-winmail-opener/releases/download/${{ env.TAG_NAME }}/py-winmail-opener-updated-cask.rb"
            echo "Downloading: $CASK_URL"
            if curl -L "$CASK_URL" -o "py-winmail-opener-cask.rb"; then
              echo "Found cask formula in release assets"
              cp "py-winmail-opener-cask.rb" "homebrew-winmail/Casks/py-winmail-opener.rb"
              echo "CASK_FROM_RELEASE=true" >> $GITHUB_ENV
            else
              echo "Error: Could not find DMG or cask formula in release assets"
              exit 1
            fi
          else
            echo "DMG downloaded successfully"
            echo "SHA256=$(shasum -a 256 WinmailOpener-${{ env.VERSION }}.dmg | awk '{print $1}')" >> $GITHUB_ENV
            echo "CASK_FROM_RELEASE=false" >> $GITHUB_ENV
          fi
      
      - name: Create or update cask formula
        if: env.CASK_FROM_RELEASE != 'true'
        run: |
          cd homebrew-winmail
          
          # Create Casks directory if it doesn't exist
          mkdir -p Casks
          
          # Create cask formula - avoid indentation issues with YAML by using variables
          CASK_CONTENT=$(cat <<'ENDCASK'
cask "py-winmail-opener" do
  version "${VERSION}"
  sha256 "${SHA256}"
  
  url "https://github.com/jsbattig/py-winmail-opener/releases/download/v#{version}/WinmailOpener-#{version}.dmg"
  name "WinmailOpener"
  desc "Extract attachments and email body from Winmail.dat files"
  homepage "https://github.com/jsbattig/py-winmail-opener"
  
  app "WinmailOpener-#{version}.app"
  
  binary "#{appdir}/WinmailOpener-#{version}.app/Contents/MacOS/winmail-opener", target: "winmail-opener"
  
  uninstall delete: "/usr/local/bin/winmail-opener"
  
  zap trash: [
    "~/Library/Logs/WinmailOpener_log.txt",
    "~/Library/Preferences/com.github.jsbattig.winmailopener.plist"
  ]
end
ENDCASK
)
          
          # Replace environment variables
          CASK_CONTENT=${CASK_CONTENT//\$\{VERSION\}/$VERSION}
          CASK_CONTENT=${CASK_CONTENT//\$\{SHA256\}/$SHA256}
          
          # Write to file
          echo "$CASK_CONTENT" > Casks/py-winmail-opener.rb
          
          echo "Cask formula created:"
          cat Casks/py-winmail-opener.rb
          
          # Check if the formula is valid Ruby
          ruby -c Casks/py-winmail-opener.rb || {
            echo "Error: Cask formula has syntax errors"
            exit 1
          }
      
      - name: Commit and push changes
        run: |
          cd homebrew-winmail
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Add any additional files, like README updates for cask installation
          if [ ! -f "README.md" ]; then
            echo "# Homebrew Tap for WinmailOpener" > README.md
            echo "" >> README.md
            echo "## Installation" >> README.md
            echo "" >> README.md
            echo "```bash" >> README.md
            echo "# Install the cask" >> README.md
            echo "brew install --cask jsbattig/winmail/py-winmail-opener" >> README.md
            echo "```" >> README.md
          elif ! grep -q "install --cask" README.md; then
            # Add cask installation instructions if they don't exist
            sed -i '/## Installation/a\\\n```bash\n# Install the cask\nbrew install --cask jsbattig/winmail/py-winmail-opener\n```\n' README.md
          fi
          
          git add Casks/py-winmail-opener.rb README.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit - cask is already up to date"
          else
            git commit -m "Update cask for py-winmail-opener ${{ env.TAG_NAME }}"
            
            # Try to push with error handling
            git push || {
              echo "Push failed. Fetching latest changes and trying again..."
              git fetch
              git rebase origin/master
              git push
            }
            
            echo "Cask updated successfully!"
          fi
          
      - name: Verify Cask Update
        run: |
          cd homebrew-winmail
          if [ -f "Casks/py-winmail-opener.rb" ]; then
            echo "Cask formula successfully created/updated to version ${{ env.VERSION }}"
            grep "version" Casks/py-winmail-opener.rb
            grep "sha256" Casks/py-winmail-opener.rb
          else
            echo "Error: Cask formula not found"
            exit 1
          fi
