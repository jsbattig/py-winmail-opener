name: Automatic Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.github/workflows/update-homebrew.yml'
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (patch/minor/major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_release:
        description: 'Skip release creation (use for testing)'
        required: false
        type: boolean
        default: false

jobs:
  bump-version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      release_created: ${{ steps.create_release.outputs.release_created }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver
      
      - name: Determine version bump type
        id: determine_bump_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use manually specified bump type for workflow_dispatch
            echo "BUMP_TYPE=${{ github.event.inputs.bump_type }}" >> $GITHUB_ENV
            echo "SKIP_RELEASE=${{ github.event.inputs.skip_release }}" >> $GITHUB_ENV
          else
            # For automatic triggers, determine bump type from commit message
            commit_message=$(git log -1 --pretty=%B)
            echo "Commit message: $commit_message"
            
            if [[ "$commit_message" == *"[skip-release]"* ]]; then
              echo "SKIP_RELEASE=true" >> $GITHUB_ENV
              echo "Skipping release as requested in commit message"
            else
              echo "SKIP_RELEASE=false" >> $GITHUB_ENV
              
              if [[ "$commit_message" == *"[major]"* ]]; then
                echo "BUMP_TYPE=major" >> $GITHUB_ENV
                echo "Detected [major] in commit message"
              elif [[ "$commit_message" == *"[minor]"* ]]; then
                echo "BUMP_TYPE=minor" >> $GITHUB_ENV
                echo "Detected [minor] in commit message"
              else
                echo "BUMP_TYPE=patch" >> $GITHUB_ENV
                echo "Using default patch version bump"
              fi
            fi
          fi
      
      - name: Check if release should be skipped
        id: check_skip
        run: |
          if [ "$SKIP_RELEASE" == "true" ]; then
            echo "Skipping release creation as requested"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: bump_version
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          set -e  # Exit immediately if any command fails
          
          # Get current version from setup.py
          current_version=$(grep -oP 'version="\K[^"]+' setup.py) || { echo "Failed to extract current version from setup.py"; exit 1; }
          echo "Current version: $current_version"
          
          if [ -z "$current_version" ]; then
            echo "Error: Could not extract version from setup.py"
            echo "Printing first 10 lines of setup.py for debugging:"
            head -10 setup.py
            exit 1
          fi
          
          # Calculate new version using semver
          case "$BUMP_TYPE" in
            major)
              new_version=$(python -c "import semver; print(semver.bump_major('$current_version'))") || { echo "Failed to bump major version"; exit 1; }
              ;;
            minor)
              new_version=$(python -c "import semver; print(semver.bump_minor('$current_version'))") || { echo "Failed to bump minor version"; exit 1; }
              ;;
            *)
              new_version=$(python -c "import semver; print(semver.bump_patch('$current_version'))") || { echo "Failed to bump patch version"; exit 1; }
              ;;
          esac
          
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          
          # Show file content before update for debugging
          echo "setup.py before update:"
          grep "version=" setup.py
          echo "winmail_opener.py before update:"
          grep "__version__" winmail_opener.py
          
          # Update version in setup.py
          sed -i "s/version=\"$current_version\"/version=\"$new_version\"/g" setup.py || { echo "Failed to update version in setup.py"; exit 1; }
          
          # Update version in winmail_opener.py
          sed -i "s/__version__ = \"$current_version\"/__version__ = \"$new_version\"/g" winmail_opener.py || { echo "Failed to update version in winmail_opener.py"; exit 1; }
          
          # Add a note in the install.py script when it's for a new version
          # This is to make it clear the update includes the version-independent path fix
          sed -i "/WinmailOpener Installation/a # Version $new_version with version-independent paths" install.py || { echo "Warning: Could not add version note to install.py"; }
          
          # Verify updates
          echo "setup.py after update:"
          grep "version=" setup.py
          echo "winmail_opener.py after update:"
          grep "__version__" winmail_opener.py
          
          # Configure git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Commit version bump
          git add setup.py winmail_opener.py install.py
          git commit -m "[Automated] Bump version to $new_version"
          git push
      
      - name: Create Tag
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          new_version="${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v$new_version" -m "Release v$new_version"
          git push origin "v$new_version"
      
      - name: Create GitHub Release
        id: create_release
        if: steps.check_skip.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Directly trigger the update-homebrew workflow to ensure it runs
  trigger-homebrew-update:
    needs: bump-version-and-release
    if: needs.bump-version-and-release.outputs.new_version != ''
    runs-on: ubuntu-latest
    steps:
      - name: Trigger update-homebrew workflow
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          NEW_VERSION: ${{ needs.bump-version-and-release.outputs.new_version }}
        run: |
          echo "Triggering update-homebrew workflow with version v$NEW_VERSION"
          
          # Use the GitHub API to trigger the workflow_dispatch event
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/jsbattig/py-winmail-opener/actions/workflows/update-homebrew.yml/dispatches \
            -d "{\"ref\":\"master\",\"inputs\":{\"tag_name\":\"v$NEW_VERSION\"}}"
          
          # Add a delay to allow GitHub to process the request
          echo "Waiting for workflow to start..."
          sleep 5
          
          # Check if the workflow was triggered successfully
          echo "Workflow triggered. You can check the status in the Actions tab."
          echo "Note: If the workflow doesn't appear, check if the HOMEBREW_TAP_TOKEN has 'workflow' permissions."
